{"name":"Kobold","tagline":"jump and run on web page","body":"# Kobold\r\n\r\nThis project aims to provide an engine to design a jump and run on a web page.\r\nThe key point is, that the character of the jump and run will be able to\r\ninteract with standard elements on the web page.\r\n\r\n## License\r\n\r\nThe origin of this project is an idea of the Swiss game designer company\r\n[Koboldgames](http://www.koboldgames.ch/home/). The animations and images were\r\nprovided by these nice people and are part of their corporate design.\r\n\r\n## Version\r\n\r\nThis README should be up to date to the current commits. If you use a released\r\nversion, only consider the attached README to this version.\r\n\r\n## Fast Setup\r\n\r\n1.  add main.js, main.css and jQuery (for development jQuery 1.7.1 was used) to\r\n    your page.\r\n\r\n2.  add the css class \"solid\" to the page elements you want the character to\r\n    collide with.\r\n\r\n3.  make sure a js file contains the following lines\r\n\r\n    ```javascript\r\n    $(document).ready(function () {\r\n        var engine, kobold;\r\n        engine = new Engine();\r\n        kobold = engine.newMovable();\r\n        engine.start();\r\n        kobold.enableMe();\r\n    });\r\n    ```\r\n\r\n## Configuration\r\n\r\nConfigure the engine\r\n\r\n    Engine.setConfigAttr(attr, val);\r\n        attr:\r\n            \"maxFps\": 40\r\n                frame cap\r\n\r\n            \"solidClass\": \"solid\"\r\n                Class name definig which elements are solid, i.e. with which\r\n                elements the character is colliding (lets call them\r\n                collidables). All elements on the web page intended to be a\r\n                collidable must have this css class.\r\n                The character is positioned realtive to the element on which he\r\n                is standing (colliding with the bottom collider). If this object\r\n                is moved, the character will move with it and still collide with\r\n                all the other solids. It is recommenden to disable the character\r\n                during the movements to prevent collisions. Anlso nNote, that\r\n                these elements should not move while the character is able to\r\n                jump on them. For this purpose the \"solidMovingClass\" is\r\n                needed.\r\n\r\n            \"solidMovingClass\": \"solidMoving\"\r\n                Class name defining which elements are moving. Only elements\r\n                using the animate function of jquery to change the position\r\n                (left, right, top, bottom) work properly. The animation must be\r\n                already defined.\r\n                A moving element with this class will collide with the character\r\n                only if the character falls/jumps on top of it.\r\n                The character is positioned realative to the element on which he\r\n                is standing and will move with it. The character will not\r\n                collide with other solid but may collide with other moving\r\n                solids. Note that moving solids should be placed in such a way\r\n                that they can not interfere with each other.\r\n                The \"solidClass\" is ignored if an element has the\r\n                \"solidMovingClass\".\r\n\r\n            \"solidColliderClass\": \"solidCollider\"\r\n                Only used internaly, make sure this class is not used anywhere\r\n                else.\r\n\r\n            \"solidColliderMovingClass\": \"solidColliderMoving\"\r\n                Only used internaly, make sure this class is not used anywhere\r\n                else.\r\n\r\n        val:\r\n            value to configure the attribute\r\n\r\nCreate and add a new character to the engine. Example animations are provided.\r\nTo add different animations for other characters, create new css definitions\r\nsimilar to the ones provided in main.css.\r\n\r\n    Engine.newMovable(id, cssClass);\r\n        id: \"kobold\"\r\n            id of the added character. This id must like any other id be unique.\r\n            if no id is provided, the default value is set.\r\n\r\n        cssClass: \"koboldImg\"\r\n            name of the css class definig the size and animations of the\r\n            character. One set for the default names is provided. If no cssClass\r\n            is provided, the default value is set.\r\n\r\n        return\r\n            Movable object of the added charcter\r\n\r\nStart the engine (frame manager, key bindings, etc)\r\n\r\n    Engine.start();\r\n\r\nEnable or Disable character by id\r\n\r\n    Engine.setEnableMovable(id, val);\r\n        id:\r\n            id of the character to enable or diable\r\n\r\n        val:\r\n            true to enable character, false to disable character. If val is\r\n            not defined, the enable status of the character is toggled.\r\n\r\nUpdate the collider. Always call this method, if the content of the page changes\r\nin such a way, that elements intended as solids are changed (size, new elements,\r\netc.)\r\n\r\n    Engine.updateCollider();\r\n\r\nEnable character\r\n\r\n    Movable.enableMe();\r\n\r\nDisable character\r\n\r\n    Movable.disableMe();\r\n\r\nToggle enable status of the character\r\n\r\n    Movable.toggleEnableMe();\r\n\r\nEnable ability of the character\r\n\r\n    Movable.enableAttr(attr);\r\n        attr:\r\n            \"run\": true\r\n                Enables the character to walk faster, hence run. The speed can\r\n                be set with Movable.setSpeed(\"rightRun\"/\"leftRun\", speed).\r\n                The character is always able to walk. The walk speed can be set\r\n                with Movable.setSpeed(\"right\"/\"left\", speed).\r\n\r\n            \"jump\": true\r\n                Enables character to jump. The character can only jump if he is\r\n                standing on a solid. The jump height can be set with\r\n                Movable.setMaxJumpHeight(maxHeight).\r\n\r\n            \"jump.movingSolid\": false\r\n                !!! This is experimental, please do not turn this feature on !!!\r\n                Enables character to jump on a moving solid, with the same\r\n                properties as with a normal jump.\r\n                If \"jump\" is turned off, this parameter has no effect.\r\n\r\n            \"crouch\": true\r\n                Enables the character to crouch. The crouch height of the\r\n                character is set with setSize(\"heightCrouch\", height). Keep in\r\n                mind that this depends on the size of the crouch animation.\r\n\r\n            \"crouchRun\": false\r\n                Enables the character to crouch while running. If this is turned\r\n                off, the character stands up as soon the run button is pressed.\r\n                If \"crouch\" is turned off, this parameter has no effect.\r\n                If \"run\" is turned off, this parameter has no effect.\r\n\r\n            \"crouchJump\": true\r\n                Enables the character to crouch when jumping. If this is turned\r\n                off, the character stands up as soon the character is in the\r\n                air.\r\n                If \"crouch\" is turned off, this parameter has no effect.\r\n                If \"jump\" is turned off, this parameter has no effect.\r\n\r\n            \"crouchJumpHigh\":true\r\n                Enables the character to jump higher when crouch is pressed\r\n                while jumping. If this is turned off, the character jumps Only\r\n                to the maximal height set by Movable.setMaxJumpHeight(maxHeight)\r\n                This works also if \"crouchJump\" is turned off.\r\n                If \"crouch\" is turned off, this parameter has no effect.\r\n                If \"jump\" is turned off, this parameter has no effect.\r\n\r\n            \"appear\": true\r\n                With this enabled, the character cannot leave the visible screen\r\n                and is teleported back near to the last valid position if he\r\n                drops below the screen.\r\n\r\n            \"pickUp\": true\r\n                With this enabled, the character is able to pick up elements\r\n                marked with the css class set by\r\n                Movable.setPickUpCssClass(cssClass).\r\n\r\nDisable ability of the character\r\n\r\n    Movable.disableAttr(attr);\r\n        attr:\r\n            the same attributes as in Movable.enableAttr(attr).\r\n\r\nToggle ability enable status of the character\r\n\r\n    Movable.toggleEnableAttr(attr);\r\n        attr:\r\n            the same attributes as in Movable.enableAttr(attr).\r\n\r\nGet the enable status of an ability\r\n\r\n    Movable.getEnableStatus(attr);\r\n        attr:\r\n            the same attributes as in Movable.enableAttr(attr).\r\n\r\n        return\r\n            true if enabled, false if disabled\r\n\r\nDefine keyCodes to use the character abilities by pressing the keys.\r\nKeep in mind, that this will prevent the default browser behavior of the\r\nkeys.\r\n \r\n    Movable.setKeyCode(attr, keyCode);\r\n        attr:\r\n            \"jump\": 32\r\n                32 (<space>) is default to make the character jump.\r\n\r\n            \"run\": 16\r\n                16 (<shift>) is default to make the character run.\r\n\r\n            \"left\": 37\r\n                37 (<leftArrow>) is default to make the character move left.\r\n\r\n            \"right\": 39\r\n                39 (<rightArrow>) is default to make the character move right.\r\n\r\n            \"crouch\": 17\r\n                17 (<ctrl>) is default to make the character crouch.\r\n\r\nGet the key code of the corresponding ability\r\n\r\n    Movable.getKeyCode(attr);\r\n        attr:\r\n            the same attributes as in Movable.setKeyCode(attr).\r\n\r\n        return\r\n            keyCode as integer\r\n\r\nId of element where the pick up count should appear. The corresponding\r\nelement must exist on the webpage.\r\nIf \"pickUp\" is turned off, this parameter has no effect.\r\n    \r\n    Movable.setPickUpCounterId(id);\r\n        id: \"pickUpCnt\"\r\n\r\nGet pick up counter idle\r\n\r\n    Movable.getPickUpCounterId();\r\n        return\r\n            pick up counter id as string.\r\n\r\nClass name definig which elements the character can pick up by moving over them.\r\nAll elements on the web page intended to be objects that can be picked up must\r\nhave this css class.\r\nIf \"pickUp\" is turned off, this parameter has no effect.\r\n    \r\n    Movable.setPickUpCssClass(cssClass);\r\n        cssClass: \"pickUp\"\r\n\r\nGet pick up class\r\n\r\n    Movable.getPickUpCssClass();\r\n        return\r\n            pick up css class as string\r\n\r\nGet the actual pick up counter value\r\n\r\n    Movable.getPickUpCounter();\r\n        return\r\n            value of the pick up counter as integer\r\n\r\nDefine the speed of the character. Please pay attention to the minus sign.\r\n\r\n    Movable.setSpeed(attr, speed);\r\n        attr:\r\n            \"right\": 200\r\n                walking speed to the right\r\n\r\n            \"rightRun\": 300\r\n                running speed to the right\r\n\r\n            \"left\": -200\r\n                walking speed to the left\r\n\r\n            \"leftRun\": -300\r\n                running speed to the left\r\n\r\n            \"jump\": 1200\r\n                initial jumping speed\r\n\r\n            \"fall\": -1200\r\n                maximal falling speed\r\n\r\n        speed:\r\n            speed value\r\n\r\nGet the speed value of an ability\r\n\r\n    Movabe.getSpeed(attr);\r\n        attr:\r\n            same values as descriped in Movable.setSpeed(attr, speed), with one\r\n            addition:\r\n\r\n            \"inAir\":\r\n                speed of the character while falling\r\n\r\n        return\r\n            speed value as signed integer\r\n\r\nDefine the absolute screen position (in pixel) where the character will start.\r\nThis coordinates will also be used if the character needs to be reset.\r\n\r\n    Movable.setInitialPosition(x, y);\r\n        x: 30\r\n            Distance in pixel from the left screen frame to the left border of\r\n            the character.\r\n\r\n        y: 500\r\n            Distance in pixel from the bottom screen frame to the bottom border\r\n            of the character.\r\n\r\nGet the defined initial position (in pixel) of the character\r\n\r\n    Movable.getInitialPosition();\r\n        return\r\n            object with attribute x and y as pixel values.\r\n\r\nDefine the size (in pixel) of the character in either standing or crouching\r\nposition. Keep in mind that these values depend directly on the animation of the\r\nmovable. It may be unwise to change this after the inital configuration.\r\n\r\n    Movable.setSize(attr, val);\r\n        attr:\r\n            \"heightStand\": 85\r\n                Height (in pixel) of the character in standing position.\r\n\r\n            \"heightCrouch\": 40\r\n                Height (in pixel) of the character in crouching position.\r\n\r\n            \"width\": 53\r\n                Width (in pixel) of the character.\r\n\r\nGet size attribute of character\r\n\r\n    Movable.getSize(attr);\r\n        attr:\r\n            the same values as described in Movable.setSize(attr, val);\r\n\r\n        return\r\n            the size attribute as pixel value.\r\n\r\nSet the z-index of the character image\r\n\r\n    Movable.setZIndex(zIndex);\r\n        zIndex: 10\r\n            value to define the css property z-index\r\n\r\nGet the z-index of the character images\r\n\r\n    Movable.getZIndex();\r\n        return\r\n            value of css property z-index\r\n\r\nSetting these parameters allows the character to move over objects of small\r\nheights, without colliding (move up stairs without jumping). The value is the\r\nmaxium height (in pixel) of an objet in order to be ignored by right and left\r\ncollision. This can be turned off by setting both values to zero. Note that\r\ndue to imprecision when zooming functionnality of the browsers is used, this\r\nvalues should not be set lower than 3.\r\n\r\n    Movable.setColliderToleranceBottom(left, right);\r\n        left: 10\r\n            Tolarance (in pixel) for the left collider.\r\n\r\n        right: 10\r\n            Tolarance (in pixel) for the right collider. If this value is not\r\n            set, both colliders are set to the left value.\r\n\r\nGet the bottom collider tolerance values.\r\n\r\n    Movable.getColliderToleranceBottom();\r\n        return\r\n            object with attributes left and right as pixel values.\r\n\r\nSetting these parameters allows the character to move below objects of small\r\nheights hanging down from the ceiling, without colliding.The value is the\r\nmaxium height (in pixel) of an objet in order to be ignored by right and left\r\ncollision. This can be turned off by setting both values to zero. Note that\r\ndue to imprecision when zooming functionnality of the browsers is used, this\r\nvalues should not be set lower than 3.\r\n\r\n    Movable.setColliderToleranceTop(left, right);\r\n        left: 3\r\n            Tolarance (in pixel) for the left collider.\r\n\r\n        right: 3\r\n            Tolarance (in pixel) for the right collider. If this value is not\r\n            set, both colliders are set to the left value.\r\n\r\nGet the top collider tolerance values.\r\n\r\n    Movable.getColliderToleranceTop();\r\n        return\r\n            object with attributes left and right as pixel values.\r\n\r\nDefine the maximal height (in pixel) the character can jump. One exception to\r\nsurpass this height is by enabling \"crouchJumpHeight\". Please check the comments\r\nthere to get more information.\r\nIf \"jump\" is turned off, this parameter has no effect.\r\n\r\n    Movable.setMaxJumpHeight(maxHeight);\r\n        maxHeight: 160\r\n            Maximal jump height (in pixel) of the character.\r\n\r\nGet the maximum jump height\r\n\r\n    Movable.getMaxJumpHeight();\r\n        return\r\n            maximal jump height as pixel value\r\n\r\nDefine the intervall of random idle animations (in seconds). After completion of\r\nan animation, The next random animation will start in min seconds at the\r\nerliest and in max seconds at the latest.\r\n\r\n    Movable.setRandomAnimationInterval(min, max);\r\n        min: 4\r\n            erliest time of a random animation to start the next time after\r\n            completion (in seconds).\r\n\r\n        max: 10\r\n            latest time of a random animation to start the next time after\r\n            completion (in seconds). If no max value is spezified, the next\r\n            animation will alway start after min seconds.\r\n\r\nGet the random animation interval values\r\n\r\n    Movable.getRandomAnimationInterval();\r\n        return\r\n            object with attributes min and max (seconds).\r\n\r\nDefine the document overflow behavior.\r\n\r\n    Movable.setDocumentOverflowCb(direction, cb);\r\n        direction:\r\n            \"left\": default behavior description see below\r\n                the callback function triggers as soon as the character touches\r\n                the left border of the document. The default behavior is, that\r\n                the character cannot move any further to the left.\r\n\r\n            \"right\": default behavior description see below\r\n                the callback function triggers as soon as the character touches\r\n                the right border of the document. The default behavior is, that\r\n                the character cannot move any further to the right.\r\n\r\n            \"top\": default behaviour see description below\r\n                the callback function triggers as soon as the character touches\r\n                the top border of the document. By default nothing happens.\r\n\r\n            \"bottom\": default behavior description see below\r\n                the callback function triggers as soon as the character touches\r\n                the bottom border of the document. The default behavior is, that\r\n                the character is teleported back to the last valid position.\r\n                This works only if \"appear\" is enabled.\r\n\r\n        cb:\r\n            definition of the callback function if the default behaviour should\r\n            be overridden.\r\n\r\nGet document overflow behavior. This could be useful if the default behavior\r\nshould be extended, not overwritten completely.\r\n\r\n    Movable.getDocumentOverflowCb(direction);\r\n        direction:\r\n            The same directions as in\r\n            Movable.setDocumentOverflowDelta(direction, delta).\r\n\r\n        return\r\n            function, definig the document overflow behavior.\r\n\r\nDefine a distance (in pixel) from the document border at which the document\r\noverflow callback function triggers.\r\n\r\n    Movable.setDocumentOverflowDelta(direction, delta);\r\n        direction:\r\n            \"left\": 0\r\n                Distance in pixel to the left document border.\r\n\r\n            \"right\": 0\r\n                Distance in pixel to the right document border.\r\n\r\n            \"top\": -Movable.getSize('heightStand');\r\n                Distance in pixel to the top document border.\r\n\r\n            \"bottom\": -Movable.getSize('heightStand')\r\n                Distance in pixel to the bottom document border.\r\n\r\n        delta:\r\n            value in pixel\r\n\r\nGet the distance (in pixel) from the document border at which the document\r\noverflow callback function triggers.\r\n\r\n    Movable.getDocumentOverflowDelta(direction);\r\n        direction:\r\n            The same directions as in\r\n            Movable.setDocumentOverflowDelta(direction, delta).\r\n\r\nDefine the window overflow behavior.\r\n\r\n    Movable.setWindowOverflowCb(direction, cb);\r\n        direction:\r\n            \"left\": default behavior description see below\r\n                the callback function triggers as soon as the character touches\r\n                the left border of the windwo. The default behavior is, that\r\n                the window is scrolled left with the same speed as the character\r\n                is moving.\r\n\r\n            \"right\": default behavior description see below\r\n                the callback function triggers as soon as the character touches\r\n                the right border of the window. The default behavior is, that\r\n                the window is scrolled right with the same speed as the\r\n                character is moving.\r\n\r\n            \"top\": default behaviour see description below\r\n                the callback function triggers as soon as the character touches\r\n                the top border of the windwo. The default behavior is, that the\r\n                window is scrolled to the top with the same speed as the\r\n                character is moving.\r\n\r\n            \"bottom\": default behavior description see below\r\n                the callback function triggers as soon as the character touches\r\n                the bottom border of the window. The default behavior is, that\r\n                the window is scrolled down by the same speed as the character\r\n                is moving.\r\n\r\n        cb:\r\n            definition of the callback function if the default behaviour should\r\n            be overridden.\r\n\r\nGet window overflow behavior. This could be useful if the default behavior\r\nshould be extended, not overwritten completely.\r\n\r\n    Movable.getWindowOverflowCb(direction);\r\n        direction:\r\n            The same directions as in\r\n            Movable.setWindowOverflowDelta(direction, delta).\r\n\r\n        return\r\n            function, definig the window overflow behavior.\r\n\r\nDefine a distance (in pixel) from the window border at which the document\r\noverflow callback function triggers.\r\n\r\n    Movable.setWindowOverflowDelta(direction, delta);\r\n        direction:\r\n            \"left\": 500\r\n                Distance in pixel to the left windwo border.\r\n\r\n            \"right\": 500\r\n                Distance in pixel to the right window border.\r\n\r\n            \"top\": 100;\r\n                Distance in pixel to the top window border.\r\n\r\n            \"bottom\": 100\r\n                Distance in pixel to the bottom window border.\r\n\r\n        delta:\r\n            value in pixel\r\n\r\nGet the distance (in pixel) from the window border at which the window overflow\r\ncallback function triggers.\r\n\r\n    Movable.getWindowOverflowDelta(direction);\r\n        direction:\r\n            The same directions as in\r\n            Movable.setWindowOverflowDelta(direction, delta).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}